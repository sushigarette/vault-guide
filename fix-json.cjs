// Script pour corriger sp√©cifiquement votre JSON avec NaN
// Utilisation: node fix-json.cjs

const fs = require('fs');

const jsonFile = 'parc_machines.json';
const outputFile = 'cleaned-data.json';

try {
  console.log('üîç Lecture du fichier JSON...');
  let content = fs.readFileSync(jsonFile, 'utf8');
  
  console.log('üßπ Nettoyage des valeurs NaN...');
  
  // Remplacer toutes les occurrences de NaN par null
  content = content.replace(/NaN/g, 'null');
  
  console.log('‚úÖ NaN remplac√©s par null');
  console.log('üîç Validation du JSON...');
  
  // Parser pour valider
  const data = JSON.parse(content);
  
  console.log('‚úÖ JSON valide !');
  console.log(`üìä Nombre d'objets: ${data.length}`);
  
  // Sauvegarder le fichier nettoy√©
  fs.writeFileSync(outputFile, JSON.stringify(data, null, 2), 'utf8');
  
  console.log(`üíæ Fichier nettoy√© sauvegard√©: ${outputFile}`);
  console.log('üöÄ Vous pouvez maintenant importer cleaned-data.json');
  
  // Afficher un exemple de l'objet nettoy√©
  if (data.length > 0) {
    console.log('\nüìã Exemple d\'objet nettoy√©:');
    console.log(JSON.stringify(data[0], null, 2));
  }
  
} catch (error) {
  console.error('‚ùå Erreur lors du nettoyage:', error.message);
  
  // Afficher plus de d√©tails sur l'erreur
  try {
    const content = fs.readFileSync(jsonFile, 'utf8');
    const lines = content.split('\n');
    console.log('\nüìã Premi√®res lignes du fichier:');
    lines.slice(0, 15).forEach((line, index) => {
      console.log(`${index + 1}: ${line}`);
    });
    
    // Chercher les NaN dans le fichier
    const nanMatches = content.match(/NaN/g);
    if (nanMatches) {
      console.log(`\nüîç Trouv√© ${nanMatches.length} occurrences de NaN`);
    }
    
  } catch (readError) {
    console.log('Impossible de lire le fichier');
  }
}








